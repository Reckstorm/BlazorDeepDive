@page "/qgtest"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IServersEFCoreRepository ServersEFCoreRepository;

@rendermode InteractiveServer


@inject NavigationManager Navigation

<h3>QuickGridTest</h3>
<br />
@if (_servers != null)
{
    <QuickGrid Items="_servers.AsQueryable()" Pagination="_paginationState">
        <PropertyColumn Property="s => s.Name" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="s => s.City"></PropertyColumn>
        <TemplateColumn Title="Status" Sortable="true" SortBy="GridSort<Server>.ByAscending(s => s.IsRunning)">
            @if (context.IsRunning)
            {
                <span style="color:green">
                    Online
                </span>
            }
            else
            {
                <span style="color:red">
                    Offline
                </span>
            }
        </TemplateColumn>
        <TemplateColumn Title="People Online">
            @if (context.IsRunning)
            {
                <span style="color:black">@(new Random().Next(0, 10000))</span>
            }
            else
            {
                <span>N/A</span>
            }
        </TemplateColumn>
        <TemplateColumn Title="Action">
            @if (context.IsRunning)
            {
                <button class="btn btn-outline-danger" @onclick="@(() => context.IsRunning = false)">Turn Off</button>
            }
            else
            {
                <button class="btn btn-outline-success" @onclick="@(() => context.IsRunning = true)">Turn On</button>
            }
            &nbsp
            <a href="/servers/@context.Id" class="btn btn-outline-primary">Edit</a>
            &nbsp
            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(context.Id))">Delete</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="_paginationState"></Paginator>
}


@code {
    private List<Server> _servers;
    private void Delete(int serverId)
    {
        if (serverId > 0)
        {
            ServersEFCoreRepository.DeleteServer(serverId);
            Navigation.NavigateTo("/qgtest", true);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        _servers = ServersEFCoreRepository.GetServers();
    }

    private PaginationState _paginationState = new PaginationState() { ItemsPerPage = 5 };
}
