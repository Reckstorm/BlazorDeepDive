@page "/servers"
@page "/servers/back_from/{cityName}"

@rendermode InteractiveServer
@inject NavigationManager Navigation;

<h3>Servers</h3>
<br />
<CitiesListComponent @ref="citiesListComponent" HandleCitySelection="HandleCitySelection" selectedCity="@_selectedCity"></CitiesListComponent>
<br />
<SearchBarComponent @ref="searchBarComponent" HandleSearchEvent="HandleServerSearch" style="width: 1000px"></SearchBarComponent>
<br />
<CascadingValue Name="SelectedCity" Value="@_selectedCity">
    <ServersListComponent CityName="@_selectedCity" SearchValue="@_searchValue" SomeParam="@_someParam"></ServersListComponent>
</CascadingValue>
<br />
<a href="/server?city=@_selectedCity" class="btn btn-primary">Add server</a>
<button class="btn btn-primary" @onclick=@(() => _someParam = new Random().Next())>Change Param</button>


@code {
    [Parameter]
    public string CityName { get; set; }

    private string _selectedCity { get; set; } = "Toronto";

    private string _searchValue { get; set; }
    private int _someParam { get; set; }

    private CitiesListComponent citiesListComponent;
    private SearchBarComponent searchBarComponent;

    private void HandleServerSearch(string searchValue)
    {
        citiesListComponent?.ClearSelection();
        _searchValue = searchValue;
    }

    private void HandleCitySelection(string cityName)
    {
        _searchValue = string.Empty;
        searchBarComponent?.ClearSearchValue();
        _selectedCity = cityName;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        if (Navigation.Uri.Contains("back_from") && !string.IsNullOrWhiteSpace(CityName))
        {
            _selectedCity = CityName;
            StateHasChanged();
        }
    }
}
