@implements IDisposable

@* @inject TorontoOnlineServersStore TorontoOnlineServersStore; *@
@inject CitiesOnlineServersStore CitiesOnlineServersStore;

<div class="col">
    <div class="card @(SelectedCity.Equals(City)?"border border-success":"")">
        <img src="/images/@(City).png" class="card-img-top" alt="...">
        <div class="card-body">
            <button type="button" class="btn btn-primary" @onclick="@(() => SelectCity(City))">@City</button>
        </div>
        <span>@ServersOnline</span>
    </div>
</div>

@code {
    [Parameter]
    public string City { get; set; } = "";

    [Parameter]
    public string SelectedCity { get; set; }

    [Parameter]
    public EventCallback<string> HandleCitySelection { get; set; }

    private int ServersOnline;

    private CityStore _cityStore;

    private void SelectCity(string cityName) => HandleCitySelection.InvokeAsync(cityName);

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        // ServersOnline = TorontoOnlineServersStore.NumServersOnline;
        // TorontoOnlineServersStore.AddStateChangeListener(UpdateServersOnline);
        // StateHasChanged();

        _cityStore = CitiesOnlineServersStore.Cities.Find(c => c.City.Equals(City, StringComparison.OrdinalIgnoreCase));
        if (_cityStore != null)
        {
            ServersOnline = _cityStore.ServersOnline;
            _cityStore.AddStateChangeListener(UpdateServersOnline);
            StateHasChanged();
        }

    }

    private void UpdateServersOnline()
    {
        // ServersOnline = TorontoOnlineServersStore.NumServersOnline;
        // StateHasChanged();
        ServersOnline = _cityStore.ServersOnline;
        StateHasChanged();
    }

    public void Dispose()
    {
        // TorontoOnlineServersStore.RemoveStateChangeListener(UpdateServersOnline);
        if (_cityStore != null)
            _cityStore.RemoveStateChangeListener(UpdateServersOnline);
    }
}
