@inject IServersEFCoreRepository ServersEFCoreRepository;

<table class="table table-striped">
    <RepeaterComponent Items="_servers">
        <Header>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>City</th>
                    <th>Status</th>
                    <th>Online</th>
                    <th>Actions</th>
                </tr>
            </thead>
        </Header>
        <Row Context="server">
            <ServerComponent Server="server"></ServerComponent>
        </Row>
    </RepeaterComponent>
</table>

@code {
    [Parameter]
    public string CityName { get; set; }
    [Parameter]
    public string SearchValue { get; set; }
    [Parameter]
    public int SomeParam { get; set; }

    // private System.Threading.Timer _timer;

    private List<Server> _servers { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>("CityName", out var cityName))
        {
            if (cityName != CityName)
            {
                base.SetParametersAsync(parameters);
            }
        }
        if (parameters.TryGetValue<string>("SearchValue", out var searchValue))
        {
            if (searchValue != SearchValue)
            {
                base.SetParametersAsync(parameters);
            }
        }
        Console.WriteLine($"{nameof(SetParametersAsync)} : {Guid.NewGuid()}");
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(SearchValue))
            _servers = ServersEFCoreRepository.GetServersByCity(CityName);
        else
            _servers = ServersEFCoreRepository.SearchServers(SearchValue);
        Console.WriteLine($"{nameof(OnParametersSet)} : {Guid.NewGuid()}");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (string.IsNullOrWhiteSpace(this.SearchValue))
                _servers = ServersEFCoreRepository.GetServersByCity(CityName ?? "Toronto");
            else
                _servers = ServersEFCoreRepository.SearchServers(SearchValue);

            StateHasChanged();

            // _timer = new System.Threading.Timer(_ =>
            // {
            //     base.InvokeAsync(StateHasChanged);
            // }, null, 2000, 2000);
        }
        Console.WriteLine($"{nameof(OnAfterRenderAsync)} : {Guid.NewGuid()}");
        return Task.CompletedTask;
    }
}
