@inject NavigationManager Navigation
@* @inject TorontoOnlineServersStore TorontoOnlineServersStore; *@
@inject CitiesOnlineServersStore CitiesOnlineServersStore;
@inject IServersEFCoreRepository ServersEFCoreRepository;

@if (Server != null)
{
    <tr @key="Server.Id" style="background-color: @(GetBGColor())">
        <td>
            @Server.Name
        </td>
        <td>
            @Server.City
        </td>
        <td>
            <span style="color:@((Server.IsRunning?"green":"red"))">
                @(Server.IsRunning ? "Online" : "Offline")
            </span>
        </td>
        <td>
            @if (Server.IsRunning)
            {
                <span style="color:black">@(new Random().Next(0, 10000))</span>
            }
            else
            {
                <span>N/A</span>
            }
        </td>
        <td>
            @if (Server.IsRunning)
            {
                <button class="btn btn-outline-danger" @onclick="@(() => ChangeStatus(false))">Turn Off</button>
            }
            else
            {
                <button class="btn btn-outline-success" @onclick="@(() => ChangeStatus(true))">Turn On</button>
            }
            <a href="/server/@Server.Id" class="btn btn-outline-primary">Edit</a>
            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(Server.Id))">Delete</button>
        </td>
        @*         <td>
    <EditForm Model="Server" FormName="@($"formDelete-{Server.Id}")" OnValidSubmit="() => Delete(Server.Id)">
    <button type="submit" class="btn btn-danger">Delete</button>
    </EditForm>
    </td> *@
    </tr>
}

@code
{
    [Parameter]
    public Server Server { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string SelectedCity { get; set; }

    private CityStore _cityStore;

    private void Delete(int serverId)
    {
        if (serverId > 0)
        {
            ServersEFCoreRepository.DeleteServer(serverId);
            Navigation.NavigateTo("/servers", true);
        }
    }

    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (!firstRender) return;

    // }

    protected override void OnParametersSet()
    {
        _cityStore = CitiesOnlineServersStore.Cities.Find(c => c.City.Equals(Server.City, StringComparison.OrdinalIgnoreCase));
    }

    private string GetBGColor()
    {
        if (SelectedCity != null)
        {
            switch (SelectedCity)
            {
                case "Toronto": return "powderblue";
                case "Montreal": return "lightgray";
                case "Ottawa": return "palegreen";
                case "Calgary": return "pink";
                default: return "white";
            }
        }
        return "white";
    }

    private void ChangeStatus(bool status)
    {
        if (Server != null && Server.IsRunning != status)
        {
            CitiesOnlineServersStore.UpdateOnlineServersCount(Server.City, status);


            // if (Server.City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
            // {
            //     if (status) TorontoOnlineServersStore.NumServersOnline++;
            //     else TorontoOnlineServersStore.NumServersOnline--;
            // }
            Server.IsRunning = status;
            ServersEFCoreRepository.UpdateServer(Server.Id, Server);
        }
    }
}
